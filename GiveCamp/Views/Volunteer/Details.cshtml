@model GiveCamp.Models.VolunteerRegistration

@{
    ViewBag.Title = "Volunteer Registration";
}

@using (Html.BeginForm("Details", "Volunteer", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Volunteer Registration</legend>

        @Html.HiddenFor(model => model.Id)
        @Html.Hidden("UserID", Model.User.UserId)

        <div class="control-group">
            <div class="control-label">
                First Name
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Last Name
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Team Name
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.TeamName)
                @Html.ValidationMessageFor(model => model.TeamName)            <span class="help-block">Do you want us to put you and your friends on the same team?
                    <br />
                    If you all register with the same team name we will do our best to keep you together.
                </span>
            </div>

        </div>

        <div class="control-group">
            <div class="control-label">
                Email
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Twitter Handle
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.Twitter)
                @Html.ValidationMessageFor(model => model.Twitter)
                <span class="help-inline">(i.e. @@DallasGiveCamp)
                </span>
            </div>

        </div>

        <div class="control-group">
            <div class="control-label">
                Blog / Website URL
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.WebsiteUrl)
                @Html.ValidationMessageFor(model => model.WebsiteUrl)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Phone Number
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.Phone)
                @Html.ValidationMessageFor(model => model.Phone)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Shirt Size
            </div>
            <div class="controls">
                @Html.DropDownList("ShirtSize", ViewBag.ShirtSizeList as IEnumerable<SelectListItem>)
                @Html.ValidationMessageFor(model => model.ShirtSize)
                <span class="help-inline">
                    Sizes are in Mens.
                </span>
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Special Dietary Requirements?
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.Diet)
                @Html.ValidationMessageFor(model => model.Diet)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Are you a student?
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.Student)
                @Html.ValidationMessageFor(model => model.Student)<span class="help-inline">High School or University</span>
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Are you a Microsoft MVP?
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.Mvp)
                @Html.ValidationMessageFor(model => model.Mvp)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Tell us a bit about yourself:
            </div>
            <div class="controls">
                @Html.TextAreaFor(model => model.Bio)
                @Html.ValidationMessageFor(model => model.Bio)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                Comments for the Organizers:
            </div>
            <div class="controls">
                @Html.TextAreaFor(model => model.Comments)
                @Html.ValidationMessageFor(model => model.Comments)
            </div>
        </div>

        <div class="control-group">
            <h3>How can you help?
            </h3>
            <span class="help-block">Check all that apply.
            </span>
        </div>
        <div class="control-group">
            <div class="control-label">
                as a Developer
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.IsDeveloper)
                @Html.ValidationMessageFor(model => model.IsDeveloper)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                as a Designer
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.IsDesigner)
                @Html.ValidationMessageFor(model => model.IsDesigner)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                as a Project Manager
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.IsProjectManager)
                @Html.ValidationMessageFor(model => model.IsProjectManager)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                as a Business Analyst
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.IsBusinessAnalyst)
                @Html.ValidationMessageFor(model => model.IsBusinessAnalyst)
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">
                as Event Staff
            </div>
            <div class="controls">
                @Html.EditorFor(model => model.IsStaff)
                @Html.ValidationMessageFor(model => model.IsStaff)
            </div>
        </div>

        <div class="control-group">
            <div class="controls">
                <input type="submit" value="Save" class="btn btn-success btn-large" />
            </div>
        </div>

    </fieldset>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
            tinymce.init({
                selector: "textarea",
                width: 500,
                height: 300
            });

            $('span.field-validation-valid, span.field-validation-error').each(function () {
                $(this).addClass('help-inline');
            });

            $('#Phone').mask("(999) 999-9999");

        });

        jQuery.validator.setDefaults({
            highlight: function (element, errorClass, validClass) {
                if (element.type === 'radio') {
                    this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                } else {
                    $(element).addClass(errorClass).removeClass(validClass);
                    $(element).closest('.control-group').removeClass('success').addClass('error');
                }
            },
            unhighlight: function (element, errorClass, validClass) {
                if (element.type === 'radio') {
                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                } else {
                    $(element).removeClass(errorClass).addClass(validClass);
                    $(element).closest('.control-group').removeClass('error').addClass('success');
                }
            }
        });
    </script>
}
